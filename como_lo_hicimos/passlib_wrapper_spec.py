# -*- coding: utf-8 -*-

from mamba import description, context, it, before
from expects import expect, equal
from doublex import Spy, method_returning
from doublex_expects import have_been_called_with, have_been_called

from passlib import pwd

# -------------------------------

class PasswordService(object):
    def __init__(self, password_generator):
        self._password_generator = password_generator

    def generate(self):
        return self._password_generator.genword()


class PasslibWrapper(object):
    def __init__(self, real_passlib):
        self._real_passlib = real_passlib

    def genword(self, **kwargs):
        return self._real_passlib.genword(**kwargs)

# -------------------------------


A_GENERATED_PASSWORD = 'a_generated_password'

with description('Password Service Specs') as self:
    with before.each:
        self.password_generator = Spy(PasslibWrapper)
        self.password_service = PasswordService(self.password_generator)

    with context('generate password for (happy path)'):
        with it('calls passlib library to generate random password'):
            self.password_service.generate()

            expect(self.password_generator.genword).to(have_been_called)

# --
with description('PasslibWrapper Specs') as self:
    with before.each:
        self.real_passlib = pwd
        self.password_library_wrapper = PasslibWrapper(self.real_passlib)

    with context('generating a password'):
        with it('returns a password generated by passlib library'):
            self.real_passlib.genword = method_returning(A_GENERATED_PASSWORD)

            result =  self.password_library_wrapper.genword()

            expect(result).to(equal(A_GENERATED_PASSWORD))
